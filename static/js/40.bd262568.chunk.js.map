{"version":3,"file":"static/js/40.bd262568.chunk.js","mappings":"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","sources":["components/ContactForm/ContactFormFormik.styled.js","../node_modules/nanoid/index.browser.js","components/redux/contacts/selectors.js","components/ContactForm/ContactFormFormik.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/ContactsPage.style.js","pages/Contacts/ContactsPage.js"],"sourcesContent":["import { Form, Field } from 'formik';\nimport styled from 'styled-components';\nexport const FormStyled = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  max-width: 300px;\n`;\n\nexport const FormButton = styled.button`\n  margin: auto;\n  align-items: center;\n  text-transform: capitalize;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  max-width: 120px;\n  width: 100%;\n  background-color: rgb(194, 139, 240);\n  padding: 5px;\n`;\n\nexport const FormInput = styled(Field)`\n  background: rgba(255, 255, 255, 0.1);\n  border: none;\n  border-radius: 4px;\n  font-size: 16px;\n  height: auto;\n  margin: 0;\n  outline: 0;\n  padding: 15px;\n  width: 100%;\n  background-color: #e8eeef;\n  color: #8a97a0;\n`;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.data;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectIsDeleting = state => state.contacts.isDeleting;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectCurrentID = state => state.contacts.currentID;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import { Formik, ErrorMessage } from 'formik';\nimport { FormStyled, FormButton, FormInput } from './ContactFormFormik.styled';\nimport { nanoid } from 'nanoid';\n\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { toast } from 'react-toastify';\n\nimport { addContact } from 'components/redux/contacts/operation';\nimport { selectContacts } from 'components/redux/contacts/selectors';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2, 'Too Short!')\n    .max(30, 'Too Long!')\n    .required('Required name'),\n  number: yup\n    .number()\n    .typeError(\"That doesn't look like a phone number\")\n    .positive(\"A phone number can't start with a minus\")\n    .integer(\"A phone number can't include a decimal point\")\n    .min(8)\n    .required('A phone number is required'),\n});\n\nexport const ContactFormFormik = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  const handleSubmit = (values, actions) => {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === values.name.toLowerCase()\n      )\n    ) {\n      toast.warn(`${values.name} is already in contacts!`);\n      return;\n    }\n\n    dispatch(addContact(values));\n    actions.setSubmitting(false);\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormStyled>\n        <label htmlFor={nameId}>\n          Name\n          <FormInput\n            id={nameId}\n            type=\"text\"\n            name=\"name\"\n            required\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          ></FormInput>\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </label>\n\n        <label htmlFor={numberId}>\n          Number\n          <FormInput\n            id={numberId}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          ></FormInput>\n          <ErrorMessage name=\"number\" component=\"div\" />\n        </label>\n\n        <FormButton type=\"submit\">Add contact</FormButton>\n      </FormStyled>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactListElements = styled.ul`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background: rgba(255, 255, 255, 0.1);\n  border: none;\n  border-radius: 4px;\n  font-size: 14px;\n  height: auto;\n  margin: 5px;\n  outline: 0;\n  padding: 15px;\n  width: 100%;\n  background-color: #e8eeef;\n  color: #8a97a0;\n`;\n\nexport const DeleteContactBtn = styled.button`\n  align-items: center;\n\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  min-width: 60px;\n  background-color: rgb(194, 139, 240);\n  padding: 5px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ContactListElements, DeleteContactBtn } from './ContactList.styled';\n\nimport { useEffect } from 'react';\n\nimport Loader from 'components/Loader/Loader';\nimport { toast } from 'react-toastify';\nimport {\n  deleteContact,\n  fetchContacts,\n} from 'components/redux/contacts/operation';\nimport {\n  selectError,\n  selectIsLoading,\n  selectVisibleContacts,\n} from 'components/redux/contacts/selectors';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n  useEffect(() => {\n    if (!!error) {\n      toast.error(error);\n    }\n    dispatch(fetchContacts());\n  }, [dispatch, error]);\n\n  const filteredContacts = useSelector(selectVisibleContacts);\n\n  const isLoading = useSelector(selectIsLoading);\n\n  const deleteItem = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <>\n      <ul>\n        {isLoading && <Loader />}\n        {!!filteredContacts.length &&\n          filteredContacts.map(({ name, number, id }) => (\n            <ContactListElements key={id}>\n              <p>\n                {name}:{number}\n              </p>\n              <DeleteContactBtn type=\"button\" onClick={() => deleteItem(id)}>\n                Delete\n              </DeleteContactBtn>\n            </ContactListElements>\n          ))}\n      </ul>\n    </>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  max-width: 300px;\n`;\n\nexport const FilterInput = styled.input`\n  background: rgba(255, 255, 255, 0.1);\n  border: none;\n  border-radius: 4px;\n  font-size: 16px;\n  height: auto;\n  margin: 0;\n  outline: 0;\n  padding: 15px;\n  width: 100%;\n  background-color: #e8eeef;\n  color: #8a97a0;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { FilterContainer, FilterInput } from './Filter.styled';\n\nimport { selectFilter } from 'components/redux/contacts/selectors';\nimport { setFilter } from 'components/redux/contacts/filterSlice';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const onChange = e => {\n    dispatch(setFilter(e.target.value.trim()));\n  };\n  return (\n    <FilterContainer>\n      <label>Find contacts by name</label>\n      <FilterInput type=\"text\" value={filter} onChange={onChange}></FilterInput>\n    </FilterContainer>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\nexport const ContactTitle = styled.h1`\n  padding-top: 30px;\n  text-align: center;\n`;\n\nexport const SubContactTitle = styled.h2`\n  text-align: center;\n`;\n\nexport const ContactsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import { ContactFormFormik } from 'components/ContactForm/ContactFormFormik';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nimport { fetchContacts } from 'components/redux/contacts/operation';\nimport {\n  selectError,\n  selectVisibleContacts,\n} from 'components/redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport {\n  ContactTitle,\n  ContactsContainer,\n  SubContactTitle,\n} from './ContactsPage.style';\n\nexport default function ContactsPage() {\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n  const selectedContacts = useSelector(selectVisibleContacts);\n\n  useEffect(() => {\n    if (!!error) {\n      toast.error(error);\n    }\n    dispatch(fetchContacts());\n  }, [dispatch, error]);\n\n  return (\n    <ContactsContainer>\n      <ContactTitle>Phone book</ContactTitle>\n\n      <SubContactTitle>Adding new contact</SubContactTitle>\n      <ContactFormFormik />\n      <SubContactTitle>Contacts</SubContactTitle>\n      <Filter />\n\n      {!!selectedContacts.length && <ContactList />}\n    </ContactsContainer>\n  );\n}\n"],"names":["FormStyled","styled","Form","_templateObject","_taggedTemplateLiteral","FormButton","_templateObject2","FormInput","Field","_templateObject3","nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","selectContacts","state","contacts","data","selectFilter","filter","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","schema","yup","shape","min","max","required","number","typeError","positive","integer","ContactFormFormik","dispatch","useDispatch","useSelector","nameId","numberId","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","find","toast","concat","addContact","setSubmitting","resetForm","children","_jsxs","htmlFor","type","pattern","ErrorMessage","component","ContactListElements","DeleteContactBtn","useEffect","fetchContacts","filteredContacts","_Fragment","Loader","map","_ref","onClick","deleteContact","deleteItem","FilterContainer","FilterInput","value","onChange","e","setFilter","target","trim","ContactTitle","SubContactTitle","ContactsContainer","ContactsPage","selectedContacts","Filter","ContactList"],"sourceRoot":""}